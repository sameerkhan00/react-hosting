{"version":3,"sources":["kite.jsx","footer.js","textfield.js","btn.js","App.jsx","serviceWorker.js","index.js"],"names":["Component","useStyles","makeStyles","theme","root","margin","spacing","width","BasicTextFields","classes","className","noValidate","autoComplete","TextField","id","label","variant","display","flexDirection","alignItems","BasicButtonGroup","ButtonGroup","color","aria-label","Button","App","for","type","aria-describedby","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAGkCA,YCFGA,Y,qBCG/BC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,aAKE,SAASC,IACtB,IAAMC,EAAUR,IAEhB,OACE,0BAAMS,UAAWD,EAAQL,KAAMO,YAAU,EAACC,aAAa,OAErD,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,WAAWC,QAAQ,c,oBCdxDf,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJa,QAAS,OACTC,cAAe,SACfC,WAAY,SACZ,QAAS,CACPd,OAAQF,EAAMG,QAAQ,SAKb,SAASc,IACtB,IAAMX,EAAUR,IAEhB,OACE,yBAAKS,UAAWD,EAAQL,MACtB,kBAACiB,EAAA,EAAD,CAAaC,MAAM,UAAUC,aAAW,iCACtC,kBAACC,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,eAEF,kBAACH,EAAA,EAAD,CAAaL,QAAQ,YAAYM,MAAM,UAAUC,aAAW,kCAC1D,kBAACC,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,eAEF,kBAACH,EAAA,EAAD,CAAaL,QAAQ,OAAOM,MAAM,UAAUC,aAAW,6BACrD,kBAACC,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,gBC0DR,IAqDeC,E,uKAlCX,OAEJ,6BAEA,kBAACjB,EAAD,MACA,kBAACY,EAAD,MACI,8BACF,yBAAKV,UAAU,cACb,2BAAOgB,IAAI,sBAAX,iBACA,2BAAOC,KAAK,QAAQjB,UAAU,eAAeI,GAAG,qBAAqBc,mBAAiB,cACtF,2BAAOd,GAAG,YAAYJ,UAAU,wBAAhC,mDAEF,yBAAKA,UAAU,cACb,2BAAOgB,IAAI,yBAAX,YACA,2BAAOC,KAAK,WAAWjB,UAAU,eAAeI,GAAG,2BAErD,yBAAKJ,UAAU,yBACb,2BAAOiB,KAAK,WAAWjB,UAAU,mBAAmBI,GAAG,kBACvD,2BAAOe,MAAM,mBAAmBH,IAAI,iBAApC,iBAEF,4BAAQC,KAAK,SAASjB,UAAU,mBAAhC,gB,GAtBgBV,aCjGE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f7be2ae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Kite extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>hello kite</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// export default Kite;","import React, { Component } from \"react\";\r\n export default class Footer extends Component{\r\n     render(){\r\n         return(\r\n             <div>\r\n                 <h2>hello foter</h2>\r\n             </div>\r\n         )\r\n     }\r\n }","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicTextFields() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      \r\n      <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicButtonGroup() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n        <Button>One</Button>\r\n        <Button>Two</Button>\r\n        <Button>Three</Button>\r\n      </ButtonGroup>\r\n      <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n        <Button>One</Button>\r\n        <Button>Two</Button>\r\n        <Button>Three</Button>\r\n      </ButtonGroup>\r\n      <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\r\n        <Button>One</Button>\r\n        <Button>Two</Button>\r\n        <Button>Three</Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport Kite from \"./kite\"\nimport Footer from \"./footer\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BasicTextFields from \"./textfield\";\nimport BasicButtonGroup from './btn';\n\n// import \"./App.css\";\n// import \"./index.css\";\n// import Para from \"./Para\"\n// import Game, {name} from \"./Game\";\n\n// let a=\"samer\";\n// let b=\"khan\"  \n// let hours = new Date(2020,5,5,1);\n// let curr = hours.getHours();\n// let greeting = \"Good morning\";  \n// const cssStyle = {};\n\n// if (curr >= 1 && curr <= 12) {\n//   greeting = \"Good Morning\";\n//   cssStyle.color = \"green\";\n// } else if (curr >= 12 && curr < 19) {\n//   greeting = \"Good Afternoon\";\n//   cssStyle.color = \"Orange\";\n// } else {\n//   greeting = \"Good Night\";\n//   cssStyle.color = \"black\";\n//}\n\n// let date=today.getFullYear()+\"-\"+today.getMonth()+\"-\"+today.getDate();\n// let time=today.getHours()+\":\"+today.getMinutes()+\":\"+today.getSeconds();\n// function App() {\n//   let arr=[{text:\"ghous\"},{text:\"basit\"}];\n//     return (\n//     <div>\n// <ul>\n  \n//     <li>{arr.text[0]}</li>\n//     <li>{arr.text[1]}</li>\n\n    \n//     )\n  \n// </ul>\n    {/* <Para/>\n      <Game/> */}\n  {/* <h1>{name}</h1> */}\n      {/* <h1 className=\"head\">\n        Hello,\n        <span style={cssStyle}>\n          {greeting}\n        </span>\n      </h1> */}\n\n\n\n\n//     </div>\n//   );\n// }\n\n//{\n  /* <h1 contenteditable=\"true\">Sameer {b} </h1>\n                  <p>saylani </p>\n          <h1> {`hello ${a} ${b}`}</h1>\n\n          <ol>\n          <li>money</li>\n          <li>friends</li>\n          <li>hiest</li>\n          </ol>\n  <p>{`Today date is ${today}`}</p>\n  <p>{`Current time is ${time}`}</p> */\n//}\n\n// class App extends React.Component {\n//   render(\n//     [<h1> hellow </h1>],\n//   );\n\n// {\n//   let name=\"sameer\";\n//   let fname=\"khan\"\n//   return(\n//     <div>\n//     <h1>{`${name} ${fname}`}</h1>\n//     </div>\n//     )\n//   }\n//}\nlet obj={\n  backgroundColor:\"red\",\n  color:\"yellow\"\n}\n\n\n// class Header extends Component{\n//   render(){\n//     return(\n// <div>\n  \n \n// <h2 style={obj}>hello this is second component</h2>\n// </div>\n//     )\n//   }\n// }\nclass App extends Component{\n  render(){\n    return(\n    \n<div>\n\n<BasicTextFields/> \n<BasicButtonGroup/> \n    <form>\n  <div className=\"form-group\">\n    <label for=\"exampleInputEmail1\">Email address</label>\n    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"/>\n    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n  </div>\n  <div className=\"form-group\">\n    <label for=\"exampleInputPassword1\">Password</label>\n    <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\"/>\n  </div>\n  <div className=\"form-group form-check\">\n    <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\"/>\n    <label class=\"form-check-label\" for=\"exampleCheck1\">Check me out</label>\n  </div>\n  <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n</form>\n\n\n</div>\n    )\n  }\n\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}